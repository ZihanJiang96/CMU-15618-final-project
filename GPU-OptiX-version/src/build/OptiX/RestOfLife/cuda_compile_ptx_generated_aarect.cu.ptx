//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-27506705
// Cuda compilation tools, release 10.2, V10.2.89
// Based on LLVM 3.4svn
//

.version 6.5
.target sm_61
.address_size 64

	// .globl	_Z8hitRectXi
.visible .global .align 4 .f32 a0;
.visible .global .align 4 .f32 a1;
.visible .global .align 4 .f32 b0;
.visible .global .align 4 .f32 b1;
.visible .global .align 4 .f32 k;
.visible .global .align 4 .u32 flip;
.visible .global .align 4 .b8 theRay[36];
.visible .global .align 4 .b8 thePrd[88];
.visible .global .align 4 .b8 hitRecord[36];
.visible .global .align 4 .b8 _ZN21rti_internal_typeinfo2a0E[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.visible .global .align 4 .b8 _ZN21rti_internal_typeinfo2a1E[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.visible .global .align 4 .b8 _ZN21rti_internal_typeinfo2b0E[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.visible .global .align 4 .b8 _ZN21rti_internal_typeinfo2b1E[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.visible .global .align 4 .b8 _ZN21rti_internal_typeinfo1kE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.visible .global .align 4 .b8 _ZN21rti_internal_typeinfo4flipE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.visible .global .align 4 .b8 _ZN21rti_internal_typeinfo6theRayE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.visible .global .align 4 .b8 _ZN21rti_internal_typeinfo6thePrdE[8] = {82, 97, 121, 0, 88, 0, 0, 0};
.visible .global .align 4 .b8 _ZN21rti_internal_typeinfo9hitRecordE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.visible .global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.visible .global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.visible .global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.visible .global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.visible .global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.visible .global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.visible .global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.visible .global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.visible .global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.visible .global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.visible .global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.visible .global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.visible .global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.visible .global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.visible .global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.visible .global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.visible .global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.visible .global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.visible .global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.visible .global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.visible .global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.visible .global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.visible .global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.visible .global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.visible .global .align 1 .b8 _ZN21rti_internal_typename2a0E[6] = {102, 108, 111, 97, 116, 0};
.visible .global .align 1 .b8 _ZN21rti_internal_typename2a1E[6] = {102, 108, 111, 97, 116, 0};
.visible .global .align 1 .b8 _ZN21rti_internal_typename2b0E[6] = {102, 108, 111, 97, 116, 0};
.visible .global .align 1 .b8 _ZN21rti_internal_typename2b1E[6] = {102, 108, 111, 97, 116, 0};
.visible .global .align 1 .b8 _ZN21rti_internal_typename1kE[6] = {102, 108, 111, 97, 116, 0};
.visible .global .align 1 .b8 _ZN21rti_internal_typename4flipE[4] = {105, 110, 116, 0};
.visible .global .align 1 .b8 _ZN21rti_internal_typename6theRayE[11] = {111, 112, 116, 105, 120, 58, 58, 82, 97, 121, 0};
.visible .global .align 1 .b8 _ZN21rti_internal_typename6thePrdE[11] = {80, 101, 114, 82, 97, 121, 68, 97, 116, 97, 0};
.visible .global .align 1 .b8 _ZN21rti_internal_typename9hitRecordE[10] = {72, 105, 116, 82, 101, 99, 111, 114, 100, 0};
.visible .global .align 4 .u32 _ZN21rti_internal_typeenum2a0E = 4919;
.visible .global .align 4 .u32 _ZN21rti_internal_typeenum2a1E = 4919;
.visible .global .align 4 .u32 _ZN21rti_internal_typeenum2b0E = 4919;
.visible .global .align 4 .u32 _ZN21rti_internal_typeenum2b1E = 4919;
.visible .global .align 4 .u32 _ZN21rti_internal_typeenum1kE = 4919;
.visible .global .align 4 .u32 _ZN21rti_internal_typeenum4flipE = 4919;
.visible .global .align 4 .u32 _ZN21rti_internal_typeenum6theRayE = 4919;
.visible .global .align 4 .u32 _ZN21rti_internal_typeenum6thePrdE = 4919;
.visible .global .align 4 .u32 _ZN21rti_internal_typeenum9hitRecordE = 4919;
.visible .global .align 1 .b8 _ZN21rti_internal_semantic2a0E[1];
.visible .global .align 1 .b8 _ZN21rti_internal_semantic2a1E[1];
.visible .global .align 1 .b8 _ZN21rti_internal_semantic2b0E[1];
.visible .global .align 1 .b8 _ZN21rti_internal_semantic2b1E[1];
.visible .global .align 1 .b8 _ZN21rti_internal_semantic1kE[1];
.visible .global .align 1 .b8 _ZN21rti_internal_semantic4flipE[1];
.visible .global .align 1 .b8 _ZN21rti_internal_semantic6theRayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121, 0};
.visible .global .align 1 .b8 _ZN21rti_internal_semantic6thePrdE[10] = {114, 116, 80, 97, 121, 108, 111, 97, 100, 0};
.visible .global .align 1 .b8 _ZN21rti_internal_semantic9hitRecordE[20] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 104, 105, 116, 82, 101, 99, 111, 114, 100, 0};
.visible .global .align 1 .b8 _ZN23rti_internal_annotation2a0E[1];
.visible .global .align 1 .b8 _ZN23rti_internal_annotation2a1E[1];
.visible .global .align 1 .b8 _ZN23rti_internal_annotation2b0E[1];
.visible .global .align 1 .b8 _ZN23rti_internal_annotation2b1E[1];
.visible .global .align 1 .b8 _ZN23rti_internal_annotation1kE[1];
.visible .global .align 1 .b8 _ZN23rti_internal_annotation4flipE[1];
.visible .global .align 1 .b8 _ZN23rti_internal_annotation6theRayE[1];
.visible .global .align 1 .b8 _ZN23rti_internal_annotation6thePrdE[1];
.visible .global .align 1 .b8 _ZN23rti_internal_annotation9hitRecordE[1];

.visible .entry _Z8hitRectXi(
	.param .u32 _Z8hitRectXi_param_0
)
{
	.reg .pred 	%p<13>;
	.reg .f32 	%f<61>;
	.reg .b32 	%r<7>;


	ld.global.f32 	%f4, [k];
	ld.global.f32 	%f5, [theRay];
	sub.ftz.f32 	%f6, %f4, %f5;
	ld.global.f32 	%f7, [theRay+12];
	div.approx.ftz.f32 	%f1, %f6, %f7;
	ld.global.f32 	%f8, [theRay+32];
	setp.gt.ftz.f32	%p1, %f1, %f8;
	ld.global.f32 	%f9, [theRay+28];
	setp.lt.ftz.f32	%p2, %f1, %f9;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB0_4;

	ld.global.f32 	%f10, [theRay+4];
	ld.global.f32 	%f11, [theRay+16];
	fma.rn.ftz.f32 	%f2, %f1, %f11, %f10;
	ld.global.f32 	%f12, [theRay+20];
	ld.global.f32 	%f13, [theRay+8];
	fma.rn.ftz.f32 	%f3, %f1, %f12, %f13;
	ld.global.f32 	%f14, [a0];
	setp.lt.ftz.f32	%p4, %f2, %f14;
	ld.global.f32 	%f15, [a1];
	setp.gt.ftz.f32	%p5, %f2, %f15;
	or.pred  	%p6, %p4, %p5;
	ld.global.f32 	%f16, [b0];
	setp.lt.ftz.f32	%p7, %f3, %f16;
	or.pred  	%p8, %p6, %p7;
	ld.global.f32 	%f17, [b1];
	setp.gt.ftz.f32	%p9, %f3, %f17;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	BB0_4;

	// inline asm
	call (%r1), _rt_potential_intersection, (%f1);
	// inline asm
	setp.eq.s32	%p11, %r1, 0;
	@%p11 bra 	BB0_4;

	ld.global.f32 	%f35, [theRay+12];
	ld.global.f32 	%f36, [theRay+16];
	ld.global.f32 	%f37, [theRay+20];
	ld.global.f32 	%f38, [theRay];
	fma.rn.ftz.f32 	%f23, %f1, %f35, %f38;
	ld.global.f32 	%f39, [theRay+4];
	fma.rn.ftz.f32 	%f24, %f1, %f36, %f39;
	ld.global.f32 	%f40, [theRay+8];
	fma.rn.ftz.f32 	%f25, %f1, %f37, %f40;
	mov.u32 	%r2, 3841;
	mov.f32 	%f26, 0f3F800000;
	// inline asm
	call (%f19, %f20, %f21, %f22), _rt_transform_tuple, (%r2, %f23, %f24, %f25, %f26);
	// inline asm
	div.approx.ftz.f32 	%f41, %f19, %f22;
	div.approx.ftz.f32 	%f42, %f20, %f22;
	div.approx.ftz.f32 	%f43, %f21, %f22;
	st.global.f32 	[hitRecord], %f41;
	st.global.f32 	[hitRecord+4], %f42;
	st.global.f32 	[hitRecord+8], %f43;
	ld.global.u32 	%r6, [flip];
	setp.eq.s32	%p12, %r6, 0;
	mov.u32 	%r5, 0;
	selp.f32	%f31, 0f3F800000, 0fBF800000, %p12;
	selp.f32	%f33, 0f00000000, 0f80000000, %p12;
	mov.u32 	%r3, 7937;
	mov.f32 	%f34, 0f00000000;
	// inline asm
	call (%f27, %f28, %f29, %f30), _rt_transform_tuple, (%r3, %f31, %f33, %f33, %f34);
	// inline asm
	mul.ftz.f32 	%f44, %f28, %f28;
	fma.rn.ftz.f32 	%f45, %f27, %f27, %f44;
	fma.rn.ftz.f32 	%f46, %f29, %f29, %f45;
	rsqrt.approx.ftz.f32 	%f47, %f46;
	mul.ftz.f32 	%f48, %f27, %f47;
	mul.ftz.f32 	%f49, %f28, %f47;
	mul.ftz.f32 	%f50, %f29, %f47;
	st.global.f32 	[hitRecord+12], %f48;
	st.global.f32 	[hitRecord+16], %f49;
	st.global.f32 	[hitRecord+20], %f50;
	ld.global.f32 	%f51, [a0];
	sub.ftz.f32 	%f52, %f2, %f51;
	ld.global.f32 	%f53, [a1];
	sub.ftz.f32 	%f54, %f53, %f51;
	div.approx.ftz.f32 	%f55, %f52, %f54;
	st.global.f32 	[hitRecord+28], %f55;
	ld.global.f32 	%f56, [b0];
	sub.ftz.f32 	%f57, %f3, %f56;
	ld.global.f32 	%f58, [b1];
	sub.ftz.f32 	%f59, %f58, %f56;
	div.approx.ftz.f32 	%f60, %f57, %f59;
	st.global.f32 	[hitRecord+32], %f60;
	// inline asm
	call (%r4), _rt_report_intersection, (%r5);
	// inline asm

BB0_4:
	ret;
}

	// .globl	_Z8hitRectYi
.visible .entry _Z8hitRectYi(
	.param .u32 _Z8hitRectYi_param_0
)
{
	.reg .pred 	%p<13>;
	.reg .f32 	%f<61>;
	.reg .b32 	%r<7>;


	ld.global.f32 	%f4, [k];
	ld.global.f32 	%f5, [theRay+4];
	sub.ftz.f32 	%f6, %f4, %f5;
	ld.global.f32 	%f7, [theRay+16];
	div.approx.ftz.f32 	%f1, %f6, %f7;
	ld.global.f32 	%f8, [theRay+32];
	setp.gt.ftz.f32	%p1, %f1, %f8;
	ld.global.f32 	%f9, [theRay+28];
	setp.lt.ftz.f32	%p2, %f1, %f9;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB1_4;

	ld.global.f32 	%f10, [theRay];
	ld.global.f32 	%f11, [theRay+12];
	fma.rn.ftz.f32 	%f2, %f1, %f11, %f10;
	ld.global.f32 	%f12, [theRay+20];
	ld.global.f32 	%f13, [theRay+8];
	fma.rn.ftz.f32 	%f3, %f1, %f12, %f13;
	ld.global.f32 	%f14, [a0];
	setp.lt.ftz.f32	%p4, %f2, %f14;
	ld.global.f32 	%f15, [a1];
	setp.gt.ftz.f32	%p5, %f2, %f15;
	or.pred  	%p6, %p4, %p5;
	ld.global.f32 	%f16, [b0];
	setp.lt.ftz.f32	%p7, %f3, %f16;
	or.pred  	%p8, %p6, %p7;
	ld.global.f32 	%f17, [b1];
	setp.gt.ftz.f32	%p9, %f3, %f17;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	BB1_4;

	// inline asm
	call (%r1), _rt_potential_intersection, (%f1);
	// inline asm
	setp.eq.s32	%p11, %r1, 0;
	@%p11 bra 	BB1_4;

	ld.global.f32 	%f35, [theRay+12];
	ld.global.f32 	%f36, [theRay+16];
	ld.global.f32 	%f37, [theRay+20];
	ld.global.f32 	%f38, [theRay];
	fma.rn.ftz.f32 	%f23, %f1, %f35, %f38;
	ld.global.f32 	%f39, [theRay+4];
	fma.rn.ftz.f32 	%f24, %f1, %f36, %f39;
	ld.global.f32 	%f40, [theRay+8];
	fma.rn.ftz.f32 	%f25, %f1, %f37, %f40;
	mov.u32 	%r2, 3841;
	mov.f32 	%f26, 0f3F800000;
	// inline asm
	call (%f19, %f20, %f21, %f22), _rt_transform_tuple, (%r2, %f23, %f24, %f25, %f26);
	// inline asm
	div.approx.ftz.f32 	%f41, %f19, %f22;
	div.approx.ftz.f32 	%f42, %f20, %f22;
	div.approx.ftz.f32 	%f43, %f21, %f22;
	st.global.f32 	[hitRecord], %f41;
	st.global.f32 	[hitRecord+4], %f42;
	st.global.f32 	[hitRecord+8], %f43;
	ld.global.u32 	%r6, [flip];
	setp.eq.s32	%p12, %r6, 0;
	mov.u32 	%r5, 0;
	selp.f32	%f33, 0f00000000, 0f80000000, %p12;
	selp.f32	%f32, 0f3F800000, 0fBF800000, %p12;
	mov.u32 	%r3, 7937;
	mov.f32 	%f34, 0f00000000;
	// inline asm
	call (%f27, %f28, %f29, %f30), _rt_transform_tuple, (%r3, %f33, %f32, %f33, %f34);
	// inline asm
	mul.ftz.f32 	%f44, %f28, %f28;
	fma.rn.ftz.f32 	%f45, %f27, %f27, %f44;
	fma.rn.ftz.f32 	%f46, %f29, %f29, %f45;
	rsqrt.approx.ftz.f32 	%f47, %f46;
	mul.ftz.f32 	%f48, %f27, %f47;
	mul.ftz.f32 	%f49, %f28, %f47;
	mul.ftz.f32 	%f50, %f29, %f47;
	st.global.f32 	[hitRecord+12], %f48;
	st.global.f32 	[hitRecord+16], %f49;
	st.global.f32 	[hitRecord+20], %f50;
	ld.global.f32 	%f51, [a0];
	sub.ftz.f32 	%f52, %f2, %f51;
	ld.global.f32 	%f53, [a1];
	sub.ftz.f32 	%f54, %f53, %f51;
	div.approx.ftz.f32 	%f55, %f52, %f54;
	st.global.f32 	[hitRecord+28], %f55;
	ld.global.f32 	%f56, [b0];
	sub.ftz.f32 	%f57, %f3, %f56;
	ld.global.f32 	%f58, [b1];
	sub.ftz.f32 	%f59, %f58, %f56;
	div.approx.ftz.f32 	%f60, %f57, %f59;
	st.global.f32 	[hitRecord+32], %f60;
	// inline asm
	call (%r4), _rt_report_intersection, (%r5);
	// inline asm

BB1_4:
	ret;
}

	// .globl	_Z8hitRectZi
.visible .entry _Z8hitRectZi(
	.param .u32 _Z8hitRectZi_param_0
)
{
	.reg .pred 	%p<13>;
	.reg .f32 	%f<61>;
	.reg .b32 	%r<7>;


	ld.global.f32 	%f4, [k];
	ld.global.f32 	%f5, [theRay+8];
	sub.ftz.f32 	%f6, %f4, %f5;
	ld.global.f32 	%f7, [theRay+20];
	div.approx.ftz.f32 	%f1, %f6, %f7;
	ld.global.f32 	%f8, [theRay+32];
	setp.gt.ftz.f32	%p1, %f1, %f8;
	ld.global.f32 	%f9, [theRay+28];
	setp.lt.ftz.f32	%p2, %f1, %f9;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB2_4;

	ld.global.f32 	%f10, [theRay];
	ld.global.f32 	%f11, [theRay+12];
	fma.rn.ftz.f32 	%f2, %f1, %f11, %f10;
	ld.global.f32 	%f12, [theRay+16];
	ld.global.f32 	%f13, [theRay+4];
	fma.rn.ftz.f32 	%f3, %f1, %f12, %f13;
	ld.global.f32 	%f14, [a0];
	setp.lt.ftz.f32	%p4, %f2, %f14;
	ld.global.f32 	%f15, [a1];
	setp.gt.ftz.f32	%p5, %f2, %f15;
	or.pred  	%p6, %p4, %p5;
	ld.global.f32 	%f16, [b0];
	setp.lt.ftz.f32	%p7, %f3, %f16;
	or.pred  	%p8, %p6, %p7;
	ld.global.f32 	%f17, [b1];
	setp.gt.ftz.f32	%p9, %f3, %f17;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	BB2_4;

	// inline asm
	call (%r1), _rt_potential_intersection, (%f1);
	// inline asm
	setp.eq.s32	%p11, %r1, 0;
	@%p11 bra 	BB2_4;

	ld.global.f32 	%f35, [theRay+12];
	ld.global.f32 	%f36, [theRay+16];
	ld.global.f32 	%f37, [theRay+20];
	ld.global.f32 	%f38, [theRay];
	fma.rn.ftz.f32 	%f23, %f1, %f35, %f38;
	ld.global.f32 	%f39, [theRay+4];
	fma.rn.ftz.f32 	%f24, %f1, %f36, %f39;
	ld.global.f32 	%f40, [theRay+8];
	fma.rn.ftz.f32 	%f25, %f1, %f37, %f40;
	mov.u32 	%r2, 3841;
	mov.f32 	%f26, 0f3F800000;
	// inline asm
	call (%f19, %f20, %f21, %f22), _rt_transform_tuple, (%r2, %f23, %f24, %f25, %f26);
	// inline asm
	div.approx.ftz.f32 	%f41, %f19, %f22;
	div.approx.ftz.f32 	%f42, %f20, %f22;
	div.approx.ftz.f32 	%f43, %f21, %f22;
	st.global.f32 	[hitRecord], %f41;
	st.global.f32 	[hitRecord+4], %f42;
	st.global.f32 	[hitRecord+8], %f43;
	ld.global.u32 	%r6, [flip];
	setp.eq.s32	%p12, %r6, 0;
	mov.u32 	%r5, 0;
	selp.f32	%f32, 0f00000000, 0f80000000, %p12;
	selp.f32	%f33, 0f3F800000, 0fBF800000, %p12;
	mov.u32 	%r3, 7937;
	mov.f32 	%f34, 0f00000000;
	// inline asm
	call (%f27, %f28, %f29, %f30), _rt_transform_tuple, (%r3, %f32, %f32, %f33, %f34);
	// inline asm
	mul.ftz.f32 	%f44, %f28, %f28;
	fma.rn.ftz.f32 	%f45, %f27, %f27, %f44;
	fma.rn.ftz.f32 	%f46, %f29, %f29, %f45;
	rsqrt.approx.ftz.f32 	%f47, %f46;
	mul.ftz.f32 	%f48, %f27, %f47;
	mul.ftz.f32 	%f49, %f28, %f47;
	mul.ftz.f32 	%f50, %f29, %f47;
	st.global.f32 	[hitRecord+12], %f48;
	st.global.f32 	[hitRecord+16], %f49;
	st.global.f32 	[hitRecord+20], %f50;
	ld.global.f32 	%f51, [a0];
	sub.ftz.f32 	%f52, %f2, %f51;
	ld.global.f32 	%f53, [a1];
	sub.ftz.f32 	%f54, %f53, %f51;
	div.approx.ftz.f32 	%f55, %f52, %f54;
	st.global.f32 	[hitRecord+28], %f55;
	ld.global.f32 	%f56, [b0];
	sub.ftz.f32 	%f57, %f3, %f56;
	ld.global.f32 	%f58, [b1];
	sub.ftz.f32 	%f59, %f58, %f56;
	div.approx.ftz.f32 	%f60, %f57, %f59;
	st.global.f32 	[hitRecord+32], %f60;
	// inline asm
	call (%r4), _rt_report_intersection, (%r5);
	// inline asm

BB2_4:
	ret;
}

	// .globl	_Z10getBoundsXiPf
.visible .entry _Z10getBoundsXiPf(
	.param .u32 _Z10getBoundsXiPf_param_0,
	.param .u64 _Z10getBoundsXiPf_param_1
)
{
	.reg .f32 	%f<9>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z10getBoundsXiPf_param_1];
	cvta.to.global.u64 	%rd2, %rd1;
	ld.global.f32 	%f1, [k];
	add.ftz.f32 	%f2, %f1, 0fB8D1B717;
	ld.global.f32 	%f3, [a0];
	ld.global.f32 	%f4, [b0];
	st.global.f32 	[%rd2], %f2;
	st.global.f32 	[%rd2+4], %f3;
	st.global.f32 	[%rd2+8], %f4;
	ld.global.f32 	%f5, [k];
	add.ftz.f32 	%f6, %f5, 0f38D1B717;
	ld.global.f32 	%f7, [a1];
	ld.global.f32 	%f8, [b1];
	st.global.f32 	[%rd2+12], %f6;
	st.global.f32 	[%rd2+16], %f7;
	st.global.f32 	[%rd2+20], %f8;
	ret;
}

	// .globl	_Z10getBoundsYiPf
.visible .entry _Z10getBoundsYiPf(
	.param .u32 _Z10getBoundsYiPf_param_0,
	.param .u64 _Z10getBoundsYiPf_param_1
)
{
	.reg .f32 	%f<9>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z10getBoundsYiPf_param_1];
	cvta.to.global.u64 	%rd2, %rd1;
	ld.global.f32 	%f1, [a0];
	ld.global.f32 	%f2, [k];
	add.ftz.f32 	%f3, %f2, 0fB8D1B717;
	ld.global.f32 	%f4, [b0];
	st.global.f32 	[%rd2], %f1;
	st.global.f32 	[%rd2+4], %f3;
	st.global.f32 	[%rd2+8], %f4;
	ld.global.f32 	%f5, [a1];
	ld.global.f32 	%f6, [k];
	add.ftz.f32 	%f7, %f6, 0f38D1B717;
	ld.global.f32 	%f8, [b1];
	st.global.f32 	[%rd2+12], %f5;
	st.global.f32 	[%rd2+16], %f7;
	st.global.f32 	[%rd2+20], %f8;
	ret;
}

	// .globl	_Z10getBoundsZiPf
.visible .entry _Z10getBoundsZiPf(
	.param .u32 _Z10getBoundsZiPf_param_0,
	.param .u64 _Z10getBoundsZiPf_param_1
)
{
	.reg .f32 	%f<9>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z10getBoundsZiPf_param_1];
	cvta.to.global.u64 	%rd2, %rd1;
	ld.global.f32 	%f1, [a0];
	ld.global.f32 	%f2, [b0];
	ld.global.f32 	%f3, [k];
	add.ftz.f32 	%f4, %f3, 0fB8D1B717;
	st.global.f32 	[%rd2], %f1;
	st.global.f32 	[%rd2+4], %f2;
	st.global.f32 	[%rd2+8], %f4;
	ld.global.f32 	%f5, [a1];
	ld.global.f32 	%f6, [b1];
	ld.global.f32 	%f7, [k];
	add.ftz.f32 	%f8, %f7, 0f38D1B717;
	st.global.f32 	[%rd2+12], %f5;
	st.global.f32 	[%rd2+16], %f6;
	st.global.f32 	[%rd2+20], %f8;
	ret;
}


